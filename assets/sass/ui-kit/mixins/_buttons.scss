// Mixin for generating new styles
@mixin ui-kit-btn-styles($kit-btn-color, $kit-btn-states-color) {
    background-color: $kit-btn-color;



    &:hover,
    &:focus,
    &:not(:disabled):not(.disabled):active,
    &:not(:disabled):not(.disabled).active,
    &:not(:disabled):not(.disabled):active:focus,
    &:not(:disabled):not(.disabled).active:focus,
    &:active:hover,
    &.active:hover,
    .show > &.dropdown-toggle,
    .show > &.dropdown-toggle:focus,
    .show > &.dropdown-toggle:hover {
        background-color: $kit-btn-states-color;
        color: $kit-white-color;
        box-shadow: none;
    }

    &:hover{
        box-shadow:  0 3px 8px 0 rgba(0,0,0, 0.17);
    }

    &.disabled,
    &:disabled,
    &[disabled],
    fieldset[disabled] & {
        &,
        &:hover,
        &:focus,
        &.focus,
        &:active,
        &.active {
            background-color: $kit-btn-color;
            border-color: $kit-btn-color;
        }
    }

    // btn-neutral style
    @if $kit-btn-color == $kit-white-color{
        color: $kit-primary-color;


        &.btn-danger{
            color: $kit-danger-color;

            &:hover,
            &:focus,
            &:active{
                color: $kit-danger-states-color;
            }
        }

        &.btn-primary{
            color: $kit-primary-color;

            &:hover,
            &:focus,
            &:active{
                color: $kit-primary-states-color;
            }
        }

        &.btn-info{
            color: $kit-info-color;

            &:hover,
            &:focus,
            &:active{
                color: $kit-info-states-color;
            }
        }

        &.btn-warning{
            color: $kit-warning-color;

            &:hover,
            &:focus,
            &:active{
                color: $kit-warning-states-color;
            }
        }

        &.btn-success{
            color: $kit-success-color;

            &:hover,
            &:focus,
            &:active{
                color: $kit-success-states-color;
            }
        }

        &.btn-default{
            color: $kit-default-color;

            &:hover,
            &:focus,
            &:active{
                color: $kit-default-states-color;
            }
        }

        &:hover,
        &:focus,
        &:not(:disabled):not(.disabled):active,
        &:not(:disabled):not(.disabled).active,
        &:not(:disabled):not(.disabled):active:focus,
        &:not(:disabled):not(.disabled).active:focus,
        &:active:hover,
        &.active:hover,
        .show > &.dropdown-toggle,
        .show > &.dropdown-toggle:focus,
        .show > &.dropdown-toggle:hover {
            background-color: $kit-white-color;
            color: $kit-primary-states-color;
            box-shadow: none;
        }

        &:hover,
        &:focus{
            color: $kit-primary-states-color;

            &:not(.nav-link){
                box-shadow: none;
            }

        }

    } @else {
        color: $kit-white-color;
    }

    &.btn-simple{
        color: $kit-btn-color;
        border-color: $kit-btn-color;

        &:hover,
        &:focus,
        &:not(:disabled):not(.disabled):active,
        &:not(:disabled):not(.disabled).active,
        &:not(:disabled):not(.disabled):active:focus,
        &:not(:disabled):not(.disabled).active:focus,
        &:active:hover,
        &.active:hover,
        .show > &.dropdown-toggle,
        .show > &.dropdown-toggle:focus,
        .show > &.dropdown-toggle:hover{
            background-color: $kit-transparent-bg;
            color: $kit-btn-states-color;
            border-color: $kit-btn-states-color;
            box-shadow: none;
        }
    }

    &.btn-link{
        color: $kit-btn-color;

        &:hover,
        &:focus,
        &:not(:disabled):not(.disabled):active,
        &:not(:disabled):not(.disabled).active,
        &:not(:disabled):not(.disabled):active:focus,
        &:not(:disabled):not(.disabled).active:focus,
        &:active:hover,
        &.active:hover,
        .show > &.dropdown-toggle,
        .show > &.dropdown-toggle:focus,
        .show > &.dropdown-toggle:hover{
            background-color: $kit-transparent-bg;
            color: $kit-btn-states-color;
            text-decoration: none;
            box-shadow: none;
        }
    }
}


@mixin btn-size($kit-padding-vertical, $kit-padding-horizontal, $kit-font-size, $kit-border){
   font-size: $kit-font-size;
   border-radius: $kit-border;
   padding: $kit-padding-vertical $kit-padding-horizontal;

   &.btn-simple{
       padding: $kit-padding-vertical - 1 $kit-padding-horizontal - 1;
   }

}

@mixin button-variant($background, $base-border, $hover-background: darken($background, 7.5%), $hover-border: darken($base-border, 10%), $active-background: darken($background, 10%), $active-border: darken($base-border, 12.5%)) {
    color: color-yiq($background);
    @include gradient-bg($background);
    border-color: $base-border;
    @include box-shadow($base-btn-box-shadow);

    @include hover {
        color: color-yiq($hover-background);
        @include gradient-bg($hover-background);
        border-color: $hover-border;
    }

    &:focus,
    &.focus {
        // Avoid using mixin so we can pass custom focus shadow properly
        @if $base-enable-shadows {
            box-shadow: $base-btn-box-shadow, 0 0 0 $base-btn-focus-width rgba($base-border, .5);
        } @else {
            box-shadow: 0 0 0 $base-btn-focus-width rgba($base-border, .5);
        }
    }

    // Disabled comes first so active can properly restyle
    &.disabled,
    &:disabled {
        color: color-yiq($background);
        background-color: $background;
        border-color: $base-border;
    }

    &:not(:disabled):not(.disabled):active,
    &:not(:disabled):not(.disabled).active,
    .show > &.dropdown-toggle {
        color: color-yiq($active-background);
        background-color: $active-background;
        @if $base-enable-gradients {
            background-image: none; // Remove the gradient for the pressed/active state
        }
        border-color: $active-border;

        &:focus {
            // Avoid using mixin so we can pass custom focus shadow properly
            @if $base-enable-shadows {
                box-shadow: $base-btn-active-box-shadow, 0 0 0 $base-btn-focus-width rgba($base-border, .5);
            } @else {
                box-shadow: 0 0 0 $base-btn-focus-width rgba($base-border, .5);
            }
        }
    }
}

@mixin button-outline-variant($color, $color-hover: color-yiq($color), $active-background: $color, $active-border: $color) {
    color: $color;
    background-color: transparent;
    background-image: none;
    border-color: $color;

    &:hover {
        color: $color-hover;
        background-color: $active-background;
        border-color: $active-border;
    }

    &:focus,
    &.focus {
        box-shadow: 0 0 0 $base-btn-focus-width rgba($color, .5);
    }

    &.disabled,
    &:disabled {
        color: $color;
        background-color: transparent;
    }

    &:not(:disabled):not(.disabled):active,
    &:not(:disabled):not(.disabled).active,
    .show > &.dropdown-toggle {
        color: color-yiq($active-background);
        background-color: $active-background;
        border-color: $active-border;

        &:focus {
            // Avoid using mixin so we can pass custom focus shadow properly
            @if $base-enable-shadows and $base-btn-active-box-shadow != none {
                box-shadow: $base-btn-active-box-shadow, 0 0 0 $base-btn-focus-width rgba($color, .5);
            } @else {
                box-shadow: 0 0 0 $base-btn-focus-width rgba($color, .5);
            }
        }
    }
}

// Button sizes
@mixin button-size($base-padding-y, $base-padding-x, $base-font-size, $base-line-height, $base-border-radius) {
    padding: $base-padding-y $base-padding-x;
    font-size: $base-font-size;
    line-height: $base-line-height;
    // Manually declare to provide an override to the browser default
    @if $base-enable-rounded {
        border-radius: $base-border-radius;
    } @else {
        border-radius: 0;
    }
}

