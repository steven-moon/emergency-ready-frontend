/// Grid system
//
// Generate semantic grid columns with these mixins.

@mixin argon-make-container($gutter: $argon-grid-gutter-width) {
  width: 100%;
  padding-right: $gutter / 2;
  padding-left: $gutter / 2;
  margin-right: auto;
  margin-left: auto;
}


// For each breakpoint, define the maximum width of the container in a media query
@mixin argon-make-container-max-widths($max-widths: $container-max-widths, $breakpoints: $argon-grid-breakpoints) {
  @each $breakpoint, $container-max-width in $max-widths {
    @include argon-media-breakpoint-up($breakpoint, $breakpoints) {
      max-width: $container-max-width;
    }
  }
}

@mixin argon-make-row($gutter: $argon-grid-gutter-width) {
  display: flex;
  flex-wrap: wrap;
  margin-right: -$gutter / 2;
  margin-left: -$gutter / 2;
}

@mixin argon-make-col-ready($gutter: $argon-grid-gutter-width) {
  position: relative;
  // Prevent columns from becoming too narrow when at smaller grid tiers by
  // always setting `width: 100%;`. This works because we use `flex` values
  // later on to override this initial width.
  width: 100%;
  padding-right: $gutter / 2;
  padding-left: $gutter / 2;
}

@mixin argon-make-col($argon-size, $columns: $argon-grid-columns) {
  flex: 0 0 percentage($argon-size / $columns);
  // Add a `max-width` to ensure content within each column does not blow out
  // the width of the column. Applies to IE10+ and Firefox. Chrome and Safari
  // do not appear to require this.
  max-width: percentage($argon-size / $columns);
}

@mixin argon-make-col-offset($argon-size, $columns: $argon-grid-columns) {
  $num: $argon-size / $columns;
  margin-left: if($num == 0, 0, percentage($num));
}
