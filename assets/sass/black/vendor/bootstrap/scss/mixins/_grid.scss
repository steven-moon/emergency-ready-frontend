/// Grid system
//
// Generate semantic grid columns with these mixins.

@mixin black-make-container($gutter: $black-grid-gutter-width) {
  width: 100%;
  padding-right: $gutter / 2;
  padding-left: $gutter / 2;
  margin-right: auto;
  margin-left: auto;
}


// For each breakpoint, define the maximum width of the container in a media query
@mixin black-make-container-max-widths($max-widths: $black-container-max-widths, $black-breakpoints: $black-grid-breakpoints) {
  @each $black-breakpoint, $black-container-max-width in $max-widths {
    @include black-media-breakpoint-up($black-breakpoint, $black-breakpoints) {
      max-width: $black-container-max-width;
    }
  }
}

@mixin black-make-row($gutter: $black-grid-gutter-width) {
  display: flex;
  flex-wrap: wrap;
  margin-right: -$gutter / 2;
  margin-left: -$gutter / 2;
}

@mixin black-make-col-ready($gutter: $black-grid-gutter-width) {
  position: relative;
  // Prevent columns from becoming too narrow when at smaller grid tiers by
  // always setting `width: 100%;`. This works because we use `flex` values
  // later on to override this initial width.
  width: 100%;
  padding-right: $gutter / 2;
  padding-left: $gutter / 2;
}

@mixin black-make-col($black-size, $columns: $black-grid-columns) {
  flex: 0 0 percentage($black-size / $columns);
  // Add a `max-width` to ensure content within each column does not blow out
  // the width of the column. Applies to IE10+ and Firefox. Chrome and Safari
  // do not appear to require this.
  max-width: percentage($black-size / $columns);
}

@mixin black-make-col-auto() {
  flex: 0 0 auto;
  width: auto;
  max-width: 100%; // Reset earlier grid tiers
}

@mixin black-make-col-offset($black-size, $columns: $black-grid-columns) {
  $num: $black-size / $columns;
  margin-left: if($num == 0, 0, percentage($num));
}

// Row columns
//
// Specify on a parent element(e.g., .row) to force immediate children into NN
// numberof columns. Supports wrapping to new lines, but does not do a Masonry
// style grid.
@mixin black-row-cols($count) {
  & > * {
    flex: 0 0 100% / $count;
    max-width: 100% / $count;
  }
}
