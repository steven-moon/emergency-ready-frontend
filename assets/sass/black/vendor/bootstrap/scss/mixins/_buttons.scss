// Button variants
//
// Easily pump out default styles, as well as :hover, :focus, :active,
// and disabled options for all buttons

@mixin button-variant($black-background, $black-border, $hover-background: darken($black-background, 7.5%), $hover-border: darken($black-border, 10%), $black-active-background: darken($black-background, 10%), $black-active-border: darken($black-border, 12.5%)) {
  color: color-yiq($black-background);
  @include gradient-bg($black-background);
  border-color: $black-border;
  @include box-shadow($black-btn-box-shadow);

  @include hover() {
    color: color-yiq($hover-background);
    @include gradient-bg($hover-background);
    border-color: $hover-border;
  }

  &:focus,
  &.focus {
    color: color-yiq($hover-background);
    @include gradient-bg($hover-background);
    border-color: $hover-border;
    // Avoid using mixin so we can pass custom focus shadow properly
    @if $black-enable-shadows {
      box-shadow: $black-btn-box-shadow, 0 0 0 $black-btn-focus-width rgba(mix(color-yiq($black-background), $black-border, 15%), .5);
    } @else {
      box-shadow: 0 0 0 $black-btn-focus-width rgba(mix(color-yiq($black-background), $black-border, 15%), .5);
    }
  }

  // Disabled comes first so active can properly restyle
  &.disabled,
  &:disabled {
    color: color-yiq($black-background);
    background-color: $black-background;
    border-color: $black-border;
    // Remove CSS gradients if they're enabled
    @if $black-enable-gradients {
      background-image: none;
    }
  }

  &:not(:disabled):not(.disabled):active,
  &:not(:disabled):not(.disabled).active,
  .show > &.dropdown-toggle {
    color: color-yiq($black-active-background);
    background-color: $black-active-background;
    @if $black-enable-gradients {
      background-image: none; // Remove the gradient for the pressed/active state
    }
    border-color: $black-active-border;

    &:focus {
      // Avoid using mixin so we can pass custom focus shadow properly
      @if $black-enable-shadows and $black-btn-active-box-shadow != none {
        box-shadow: $black-btn-active-box-shadow, 0 0 0 $black-btn-focus-width rgba(mix(color-yiq($black-background), $black-border, 15%), .5);
      } @else {
        box-shadow: 0 0 0 $black-btn-focus-width rgba(mix(color-yiq($black-background), $black-border, 15%), .5);
      }
    }
  }
}

@mixin button-outline-variant($color, $color-hover: color-yiq($color), $black-active-background: $color, $black-active-border: $color) {
  color: $color;
  border-color: $color;

  @include hover() {
    color: $color-hover;
    background-color: $black-active-background;
    border-color: $black-active-border;
  }

  &:focus,
  &.focus {
    box-shadow: 0 0 0 $black-btn-focus-width rgba($color, .5);
  }

  &.disabled,
  &:disabled {
    color: $color;
    background-color: transparent;
  }

  &:not(:disabled):not(.disabled):active,
  &:not(:disabled):not(.disabled).active,
  .show > &.dropdown-toggle {
    color: color-yiq($black-active-background);
    background-color: $black-active-background;
    border-color: $black-active-border;

    &:focus {
      // Avoid using mixin so we can pass custom focus shadow properly
      @if $black-enable-shadows and $black-btn-active-box-shadow != none {
        box-shadow: $black-btn-active-box-shadow, 0 0 0 $black-btn-focus-width rgba($color, .5);
      } @else {
        box-shadow: 0 0 0 $black-btn-focus-width rgba($color, .5);
      }
    }
  }
}

// Button sizes
@mixin button-size($black-padding-y, $black-padding-x, $black-font-size, $black-line-height, $black-border-radius) {
  padding: $black-padding-y $black-padding-x;
  @include font-size($black-font-size);
  line-height: $black-line-height;
  // Manually declare to provide an override to the browser default
  @include border-radius($black-border-radius, 0);
}
